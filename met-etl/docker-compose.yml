version: "3.7"

services:
  # This service runs the postgres DB used by dagster for run storage, schedule storage,
  # and event log storage.
  dagster_postgresql:
    image: postgres:11
    container_name: dagster_postgresql
    environment:
      POSTGRES_USER: "admin"
      POSTGRES_PASSWORD: "admin"
      POSTGRES_DB: "dagster"
    ports:
      - 54335:5432/tcp
    restart: unless-stopped        
    networks:
      - dagster_network

  # This service runs the gRPC server that loads your user code, in both dagit
  # and dagster-daemon. By setting DAGSTER_CURRENT_IMAGE to its own image, we tell the
  # run launcher to use this same image when launching runs in a new container as well.
  # Multiple containers like this can be deployed separately - each just needs to run on
  # its own port, and have its own entry in the workspace.yaml file that's loaded by dagit.
  dagster_user_code:
    build:
      context: .
      dockerfile: ./container/user_code/Dockerfile
    container_name: dagster_user_code
    image: dagster_user_code_image
    restart: always
    environment:
      DAGSTER_POSTGRES_USER: "admin"
      DAGSTER_POSTGRES_PASSWORD: "admin"
      DAGSTER_POSTGRES_DB: "dagster"
      DAGSTER_CURRENT_IMAGE: "dagster_user_code_image"
    networks:
      - dagster_network

  # This service runs dagit, which loads your user code from the user code container.
  # Since our instance uses the QueuedRunCoordinator, any runs submitted from dagit will be put on
  # a queue and later dequeued and launched by dagster-daemon.
  dagster_dagit:
    build:
      context: .
      dockerfile: ./container/dagster/Dockerfile
    entrypoint:
      - dagit
      - -h
      - "0.0.0.0"
      - -p
      - "3000"
      - -w
      - workspace.yaml
    container_name: dagster_dagit
    expose:
      - "3000"
    ports:
      - "3000:3000"
    environment:
      DAGSTER_POSTGRES_USER: "admin"
      DAGSTER_POSTGRES_PASSWORD: "admin"
      DAGSTER_POSTGRES_DB: "dagster"
    volumes: # Make docker client accessible so we can terminate containers from dagit
      - /var/run/docker.sock:/var/run/docker.sock
      - /tmp/io_manager_storage:/tmp/io_manager_storage
    networks:
      - dagster_network
    depends_on:
      - dagster_postgresql
      - dagster_user_code

  # This service runs the dagster-daemon process, which is responsible for taking runs
  # off of the queue and launching them, as well as creating runs from schedules or sensors.
  dagster_daemon:
    build:
      context: .
      dockerfile: ./container/dagster/Dockerfile
    entrypoint:
      - dagster-daemon
      - run
    container_name: dagster_daemon
    restart: on-failure
    environment:
      DAGSTER_POSTGRES_USER: "admin"
      DAGSTER_POSTGRES_PASSWORD: "admin"
      DAGSTER_POSTGRES_DB: "dagster"
      MET_DB_USER: $MET_DB_USER
      MET_DB_PASSWORD: $MET_DB_PASSWORD
      MET_DB_DB: $MET_DB_DB
      MET_DB_HOST: $MET_DB_HOST
      MET_DB_PORT: $MET_DB_PORT
      MET_ANALYTICS_DB_USER: $MET_ANALYTICS_DB_USER
      MET_ANALYTICS_DB_PASSWORD: $MET_ANALYTICS_DB_PASSWORD
      MET_ANALYTICS_DB_DB: $MET_ANALYTICS_DB_DB
      MET_ANALYTICS_DB_HOST: $MET_ANALYTICS_DB_HOST
      MET_ANALYTICS_DB_PORT: $MET_ANALYTICS_DB_PORT
    volumes: # Make docker client accessible so we can launch containers using host docker
      - /var/run/docker.sock:/var/run/docker.sock
      - /tmp/io_manager_storage:/tmp/io_manager_storage
    networks:
      - dagster_network
    depends_on:
      - dagster_postgresql
      - dagster_user_code

networks:
  dagster_network:
    driver: bridge
    name: dagster_network
