# GDX MET API Configuration
# For more information on these values, please see the documentation
# or met-api/src/met_api/config.py 

# Changes Flask's run mode and the set of env vars are used to configure the app. You should not need to change this here.
FLASK_ENV=development

USE_DEBUG=True # Enable a dev-friendly debug mode
TESTING= # Handle errors normally (False) or raise exceptions (True)

# CORS Settings
CORS_ORIGINS=http://localhost:3000,http://localhost:5000

# Miscellaneous Settings
SECRET_KEY="" # For Flask sessions. If unset, this value is randomized
SHAPEFILE_UPLOAD_FOLDER="/tmp/uploads"
SLUG_MAX_CHARACTERS=100
# disables certain checks for user permissions and tenant access. Buggy.
IS_SINGLE_TENANT_ENVIRONMENT=false
USE_TEST_KEYCLOAK_DOCKER=false
USE_DOCKER_MOCK=false
LEGISLATIVE_TIMEZONE="America/Vancouver"
ENGAGEMENT_END_TIME="5 PM"
# Default name for the tenant. Used to initially populate the database.
DEFAULT_TENANT_SHORT_NAME="GDX"
DEFAULT_TENANT_NAME="Government Digital Experience Division"
DEFAULT_TENANT_DESCRIPTION="The GDX Division helps inform digital standards for web content, accessibility, forms, and design."

# Keycloak configuration.
# Populate from 'GDX Modern Engagement Tools-installation-*.json'
# https://bcgov.github.io/sso-requests
KEYCLOAK_BASE_URL="" # auth-server-url
KEYCLOAK_REALMNAME="" # realm
MET_ADMIN_CLIENT_ID="" # resource
MET_ADMIN_CLIENT_SECRET="" # credentials.secret
KEYCLOAK_CONNECT_TIMEOUT="60"

KEYCLOAK_ADMIN_TOKEN_URL="" # URL to obtain the admin token from Keycloak
KEYCLOAK_ADMIN_CLIENT_ID="" # Admin Client ID for Keycloak authentication
KEYCLOAK_ADMIN_CLIENT_SECRET="" # Admin Client Secret for Keycloak authentication

CSS_API_URL="" # CSS API URL
CSS_API_ENVIRONMENT="" # CSS API environment
CSS_API_INTEGRATION_ID= # CSS API integration number

# JWT OIDC configuration for authentication
# Populate from 'GDX MET web (public)-installation-*.json'
JWT_OIDC_AUDIENCE="" # resource
JWT_OIDC_ISSUER="" # default: constructed from base url and realm name
JWT_OIDC_WELL_KNOWN_CONFIG="" # default: constructed from issuer
JWT_OIDC_JWKS_URI=""          # default: constructed from issuer
# Object path to access roles from JWT token
# JWT_OIDC_ROLE_CLAIM=realm_access.roles # SSO schema
JWT_OIDC_ROLE_CLAIM=client_roles # Keycloak schema
JWT_OIDC_CACHING_ENABLED=true # Enable caching of JWKS.
JWT_OIDC_JWKS_CACHE_TIMEOUT=300 # Timeout for JWKS cache in seconds.

# S3 configuration. Used for uploading custom header images, etc.
S3_ACCESS_KEY_ID=
S3_BUCKET=
S3_HOST='citz-gdx.objectstore.gov.bc.ca'
S3_REGION='us-east-1'
S3_SECRET_ACCESS_KEY=
S3_SERVICE='execute-api'

# Database Configuration
DATABASE_HOST="localhost"
DATABASE_PORT="5432"
DATABASE_USERNAME="postgres"
DATABASE_PASSWORD="postgres"
DATABASE_NAME="met"
#Default: set from above settings (this overrides them)
SQLALCHEMY_DATABASE_URI=
SQLALCHEMY_ECHO= 
SQLALCHEMY_TRACK_MODIFICATIONS=

# Email API Configuration
NOTIFICATIONS_EMAIL_ENDPOINT=https://met-notify-api-dev.apps.gold.devops.gov.bc.ca/api/v1/notifications/email
EMAIL_SECRET_KEY="notASecureKey" # If unset, this value is randomized
EMAIL_ENVIRONMENT=
EMAIL_FROM_ADDRESS="met-example@gov.bc.ca"
# Email Template Configuration
# Subject lines have a reasonable default value
SUBSCRIBE_EMAIL_TEMPLATE_ID=
SUBSCRIBE_EMAIL_SUBJECT=
REJECTED_EMAIL_TEMPLATE_ID=
CLOSED_ENGAGEMENT_REJECTED_EMAIL_TEMPLATE_ID=
REJECTED_EMAIL_SUBJECT=
VERIFICATION_EMAIL_TEMPLATE_ID=
VERIFICATION_EMAIL_SUBJECT=
SUBMISSION_RESPONSE_EMAIL_TEMPLATE_ID=
SUBMISSION_RESPONSE_EMAIL_SUBJECT=
CLOSEOUT_EMAIL_TEMPLATE_ID=
CLOSEOUT_EMAIL_SUBJECT=
ACCESS_REQUEST_EMAIL_TEMPLATE_ID=
ACCESS_REQUEST_EMAIL_SUBJECT=
ACCESS_REQUEST_EMAIL_ADDRESS="accessRequestHandler.fakeName@gov.bc.ca"

# Site paths for creating emails from templates
SITE_URL=http://localhost:3000
SURVEY_PATH=/surveys/submit/{survey_id}/{token}
USER_MANAGEMENT_PATH=/usermanagement
SUBMISSION_PATH=/engagements/{engagement_id}/edit/{token}
SUBSCRIBE_PATH=/engagements/{engagement_id}/subscribe/{token}
UNSUBSCRIBE_PATH=/engagements/{engagement_id}/unsubscribe/{participant_id}
ENGAGEMENT_PATH=/engagements/{engagement_id}/view
ENGAGEMENT_PATH_SLUG=/{slug}
ENGAGEMENT_DASHBOARD_PATH=/engagements/{engagement_id}/comments/public
ENGAGEMENT_DASHBOARD_PATH_SLUG=/{slug}/comments/public

#CDogs API settings
CDOGS_ACCESS_TOKEN=
CDOGS_BASE_URL=
CDOGS_SERVICE_CLIENT=
CDOGS_SERVICE_CLIENT_SECRET=
CDOGS_TOKEN_URL=

JWT_OIDC_TEST_AUDIENCE=met-web
JWT_OIDC_TEST_CLIENT_SECRET="1111111111"
JWT_OIDC_TEST_ISSUER=localhost.localdomain
JWT_OIDC_TEST_ALGORITHMS=RS256

# Test database settings
# If unset, uses the same settings as the main database
DATABASE_TEST_USERNAME=
DATABASE_TEST_PASSWORD=
DATABASE_TEST_NAME=
DATABASE_TEST_HOST=
DATABASE_TEST_PORT=

# A keycloak server is started automatically by Pytest; there is no need to start your own instance.
KEYCLOAK_TEST_BASE_URL="http://localhost:8081/auth"

# Docker database settings
# If unset, uses the same settings as the main database
DATABASE_DOCKER_USERNAME=
DATABASE_DOCKER_PASSWORD=
DATABASE_DOCKER_NAME=
DATABASE_DOCKER_HOST=
DATABASE_DOCKER_PORT=

# EPIC Integration Configuration
EPIC_INTEGRATION_ENABLED=false
EPIC_URL=
EPIC_JWT_OIDC_ISSUER=
EPIC_KC_CLIENT_ID=
EPIC_MILESTONE=
EPIC_KEYCLOAK_SERVICE_ACCOUNT_ID= 
EPIC_KEYCLOAK_SERVICE_ACCOUNT_SECRET=