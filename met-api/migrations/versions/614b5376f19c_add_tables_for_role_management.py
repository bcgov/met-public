"""add_tables_for_role_management

Revision ID: 614b5376f19c
Revises: 495d2dbe19b8
Create Date: 2024-04-16 23:18:14.705559

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.sql import table, column
from sqlalchemy import String, Integer, DateTime
from datetime import datetime


# revision identifiers, used by Alembic.
revision = '614b5376f19c'
down_revision = '495d2dbe19b8'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('user_group',
    sa.Column('created_date', sa.DateTime(), nullable=False),
    sa.Column('updated_date', sa.DateTime(), nullable=True),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.String(length=50), nullable=False),
    sa.Column('created_by', sa.String(length=50), nullable=True),
    sa.Column('updated_by', sa.String(length=50), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('user_role',
    sa.Column('created_date', sa.DateTime(), nullable=False),
    sa.Column('updated_date', sa.DateTime(), nullable=True),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.String(length=50), nullable=False),
    sa.Column('description', sa.Text(), nullable=False),
    sa.Column('created_by', sa.String(length=50), nullable=True),
    sa.Column('updated_by', sa.String(length=50), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('group_role_mapping',
    sa.Column('created_date', sa.DateTime(), nullable=False),
    sa.Column('updated_date', sa.DateTime(), nullable=True),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('role_id', sa.Integer(), nullable=True),
    sa.Column('group_id', sa.Integer(), nullable=True),
    sa.Column('created_by', sa.String(length=50), nullable=True),
    sa.Column('updated_by', sa.String(length=50), nullable=True),
    sa.ForeignKeyConstraint(['group_id'], ['user_group.id'], ),
    sa.ForeignKeyConstraint(['role_id'], ['user_role.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('user_group_membership',
    sa.Column('created_date', sa.DateTime(), nullable=False),
    sa.Column('updated_date', sa.DateTime(), nullable=True),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('staff_user_external_id', sa.String(length=50), nullable=False),
    sa.Column('group_id', sa.Integer(), nullable=False),
    sa.Column('tenant_id', sa.Integer(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('created_by', sa.String(length=50), nullable=True),
    sa.Column('updated_by', sa.String(length=50), nullable=True),
    sa.ForeignKeyConstraint(['group_id'], ['user_group.id'], ),
    sa.ForeignKeyConstraint(['staff_user_external_id'], ['staff_users.external_id'], ),
    sa.ForeignKeyConstraint(['tenant_id'], ['tenant.id'], ),
    sa.PrimaryKeyConstraint('id', 'staff_user_external_id', 'tenant_id')
    )

    # Create an ad-hoc table for 'user_group'
    group_table = table(
        'user_group',
        column('id', Integer),
        column('name', String),
        column('created_date', DateTime),
        column('updated_date', DateTime),
        column('created_by', String),
        column('updated_by', String),
    )
    # Prepare data for bulk insert into user_group
    group_data = [
        {'id': 1, 'name': 'ADMIN'},
        {'id': 2, 'name': 'TEAM_MEMBER'},
        {'id': 3, 'name': 'REVIEWER'},
        {'id': 4, 'name': 'VIEWER'},
    ]
    for group in group_data:
        group['created_date'] = datetime.utcnow()
        group['updated_date'] = datetime.utcnow()
    # Perform bulk insert in a single operation
    op.bulk_insert(group_table, group_data)

    # Create an ad-hoc table for 'user_role'
    role_table = table(
        'user_role',
        column('id', Integer),
        column('name', String),
		column('description', String),
        column('created_date', DateTime),
        column('updated_date', DateTime),
        column('created_by', String),
        column('updated_by', String),
    )
    # Prepare data for bulk insert into role
    role_data = [
        {
            'id': 1,
            'name': 'access_dashboard',
            'description': 'This role is used to provide user access to the dashboards',
        },
        {
            'id': 2,
            'name': 'clone_survey',
            'description': '',
        },
        {
            'id': 3,
            'name': 'create_admin_user',
            'description': 'Create admin users',
        },
        {
            'id': 4,
            'name': 'create_engagement',
            'description': 'Creates an engagement',
        },
        {
            'id': 5,
            'name': 'create_survey',
            'description': 'Role to create surveys',
        },
        {
            'id': 6,
            'name': 'edit_all_surveys',
            'description': 'Allows editing template surveys as well',
        },
        {
            'id': 7,
            'name': 'edit_closed_engagement',
            'description': '',
        },
        {
            'id': 8,
            'name': 'edit_draft_engagement',
            'description': '',
        },
        {
            'id': 9,
            'name': 'edit_engagement',
            'description': 'Edit an engagement details',
        },
        {
            'id': 10,
            'name': 'edit_members',
            'description': 'To edit memberships',
        },
        {
            'id': 11,
            'name': 'edit_open_engagement',
            'description': '',
        },
        {
            'id': 12,
            'name': 'edit_scheduled_engagement',
            'description': '',
        },
        {
            'id': 13,
            'name': 'edit_survey',
            'description': 'Allows edit to all surveys except template',
        },
        {
            'id': 14,
            'name': 'edit_upcoming_engagement',
            'description': '',
        },
        {
            'id': 15,
            'name': 'export_all_cac_form_to_sheet',
            'description': '',
        },
        {
            'id': 16,
            'name': 'export_all_to_csv',
            'description': '',
        },
        {
            'id': 17,
            'name': 'export_cac_form_to_sheet',
            'description': '',
        },
        {
            'id': 18,
            'name': 'export_internal_comment_sheet',
            'description': '',
        },
        {
            'id': 19,
            'name': 'export_proponent_comment_sheet',
            'description': '',
        },
        {
            'id': 20,
            'name': 'publish_engagement',
            'description': 'Publish an engagement',
        },
        {
            'id': 21,
            'name': 'review_all_comments',
            'description': '',
        },
        {
            'id': 22,
            'name': 'review_comments',
            'description': '',
        },
        {
            'id': 23,
            'name': 'show_all_comment_status',
            'description': 'Shows all the comment status on engagement and survey listing page',
        },
        {
            'id': 24,
            'name': 'toggle_user_status',
            'description': '',
        },
        {
            'id': 25,
            'name': 'unpublish_engagement',
            'description': '',
        },
        {
            'id': 26,
            'name': 'update_user_group',
            'description': '',
        },
        {
            'id': 27,
            'name': 'view_all_engagements',
            'description': 'Allows user access to all draft engagements along with scheduled and published engagements',
        },
        {
            'id': 28,
            'name': 'view_all_survey_results',
            'description': 'Allows users to view results to all questions on a survey even if they are hidden from public view',
        },
        {
            'id': 29,
            'name': 'view_all_surveys',
            'description': 'Shows all the surveys even if its hidden',
        },
        {
            'id': 30,
            'name': 'view_approved_comments',
            'description': '',
        },
        {
            'id': 31,
            'name': 'view_assigned_engagements',
            'description': '',
        },
        {
            'id': 32,
            'name': 'view_engagement',
            'description': 'View an engagement',
        },
        {
            'id': 33,
            'name': 'view_feedbacks',
            'description': '',
        },
        {
            'id': 34,
            'name': 'view_members',
            'description': '',
        },
        {
            'id': 35,
            'name': 'view_private_engagements',
            'description': 'To View DRAFT etc',
        },
        {
            'id': 36,
            'name': 'view_surveys',
            'description': '',
        },
        {
            'id': 37,
            'name': 'view_users',
            'description': '',
        },	
    ]
    for role in role_data:
        role['created_date'] = datetime.utcnow()
        role['updated_date'] = datetime.utcnow()
    # Perform bulk insert in a single operation
    op.bulk_insert(role_table, role_data)

    # Create an ad-hoc table for 'group_role_mapping'
    group_role_mapping_table = table(
        'group_role_mapping',
        column('id', Integer),
        column('role_id', Integer),
        column('group_id', Integer),
        column('created_date', DateTime),
        column('updated_date', DateTime),
        column('created_by', String),
        column('updated_by', String),
    )
    # Prepare data for bulk insert into group_role_mapping
    group_role_mapping_data = [
        {'id': 1, 'role_id': 5, 'group_id': 1},
        {'id': 2, 'role_id': 36, 'group_id': 1},
        {'id': 3, 'role_id': 22, 'group_id': 1},
        {'id': 4, 'role_id': 3, 'group_id': 1},
        {'id': 5, 'role_id': 32, 'group_id': 1},
        {'id': 6, 'role_id': 12, 'group_id': 1},
        {'id': 7, 'role_id': 8, 'group_id': 1},
        {'id': 8, 'role_id': 37, 'group_id': 1},
        {'id': 9, 'role_id': 1, 'group_id': 1},
        {'id': 10, 'role_id': 9, 'group_id': 1},
        {'id': 11, 'role_id': 6, 'group_id': 1},
        {'id': 12, 'role_id': 31, 'group_id': 1},
        {'id': 13, 'role_id': 33, 'group_id': 1},
        {'id': 14, 'role_id': 21, 'group_id': 1},
        {'id': 15, 'role_id': 4, 'group_id': 1},
        {'id': 16, 'role_id': 20, 'group_id': 1},
        {'id': 17, 'role_id': 29, 'group_id': 1},
        {'id': 18, 'role_id': 14, 'group_id': 1},
        {'id': 19, 'role_id': 34, 'group_id': 1},
        {'id': 20, 'role_id': 35, 'group_id': 1},
        {'id': 21, 'role_id': 2, 'group_id': 1},
        {'id': 22, 'role_id': 10, 'group_id': 1},
        {'id': 23, 'role_id': 13, 'group_id': 1},
        {'id': 24, 'role_id': 23, 'group_id': 1},
        {'id': 25, 'role_id': 24, 'group_id': 1},
        {'id': 26, 'role_id': 26, 'group_id': 1},
        {'id': 27, 'role_id': 27, 'group_id': 1},
        {'id': 28, 'role_id': 28, 'group_id': 1},
        {'id': 29, 'role_id': 30, 'group_id': 1},
        {'id': 30, 'role_id': 15, 'group_id': 1},
        {'id': 31, 'role_id': 16, 'group_id': 1},
        {'id': 32, 'role_id': 17, 'group_id': 1},
        {'id': 33, 'role_id': 18, 'group_id': 1},
        {'id': 34, 'role_id': 19, 'group_id': 1},
        {'id': 35, 'role_id': 25, 'group_id': 1},
        {'id': 36, 'role_id': 36, 'group_id': 2},
        {'id': 37, 'role_id': 32, 'group_id': 2},
        {'id': 38, 'role_id': 8, 'group_id': 2},
        {'id': 39, 'role_id': 37, 'group_id': 2},
        {'id': 40, 'role_id': 31, 'group_id': 2},
        {'id': 41, 'role_id': 33, 'group_id': 2},
        {'id': 42, 'role_id': 34, 'group_id': 2},
        {'id': 43, 'role_id': 2, 'group_id': 2},
        {'id': 44, 'role_id': 1, 'group_id': 2},
        {'id': 45, 'role_id': 16, 'group_id': 2},
        {'id': 46, 'role_id': 19, 'group_id': 2},
        {'id': 47, 'role_id': 23, 'group_id': 2},
        {'id': 48, 'role_id': 30, 'group_id': 2},
        {'id': 49, 'role_id': 31, 'group_id': 3},
        {'id': 50, 'role_id': 34, 'group_id': 3},
        {'id': 51, 'role_id': 1, 'group_id': 3},
        {'id': 52, 'role_id': 30, 'group_id': 3},
        {'id': 53, 'role_id': 1, 'group_id': 4},
        {'id': 54, 'role_id': 30, 'group_id': 4},
        {'id': 55, 'role_id': 32, 'group_id': 4},
        {'id': 56, 'role_id': 33, 'group_id': 4},
        {'id': 57, 'role_id': 34, 'group_id': 4},
        {'id': 58, 'role_id': 36, 'group_id': 4},
        {'id': 59, 'role_id': 37, 'group_id': 4},
    ]
    for group_role_mapping in group_role_mapping_data:
        group_role_mapping['created_date'] = datetime.utcnow()
        group_role_mapping['updated_date'] = datetime.utcnow()
    # Perform bulk insert in a single operation
    op.bulk_insert(group_role_mapping_table, group_role_mapping_data)

    # Insert data into user_group_membership table
    op.execute(
        """
        INSERT INTO user_group_membership (created_date, updated_date, staff_user_external_id, group_id, tenant_id, is_active)
        SELECT NOW(), NOW(), external_id, 1, 1, TRUE
        FROM staff_users
        """
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('user_group_membership')
    op.drop_table('group_role_mapping')
    op.drop_table('user_role')
    op.drop_table('user_group')
    # ### end Alembic commands ###
