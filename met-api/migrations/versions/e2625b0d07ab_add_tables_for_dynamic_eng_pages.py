"""add_tables_for_dynamic_eng_pages

Revision ID: e2625b0d07ab
Revises: 37176ea4708d
Create Date: 2024-02-25 21:49:58.191570

"""
import json
from alembic import op
import sqlalchemy as sa
from sqlalchemy import text
from sqlalchemy.dialects import postgresql

from met_api.constants.engagement_content_type import EngagementContentType
from met_api.utils.enums import ContentTitle

# revision identifiers, used by Alembic.
revision = 'e2625b0d07ab'
down_revision = '37176ea4708d'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('engagement_content',
    sa.Column('created_date', sa.DateTime(), nullable=False),
    sa.Column('updated_date', sa.DateTime(), nullable=True),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('title', sa.String(length=50), nullable=False),
    sa.Column('icon_name', sa.Text(), nullable=True),
    sa.Column('content_type', sa.Enum('Summary', 'Custom', name='engagementcontenttype'), nullable=False),
    sa.Column('engagement_id', sa.Integer(), nullable=True),
    sa.Column('sort_index', sa.Integer(), nullable=False),
    sa.Column('is_internal', sa.Boolean(), nullable=False),
    sa.Column('created_by', sa.String(length=50), nullable=True),
    sa.Column('updated_by', sa.String(length=50), nullable=True),
    sa.ForeignKeyConstraint(['engagement_id'], ['engagement.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('engagement_custom_content',
    sa.Column('created_date', sa.DateTime(), nullable=False),
    sa.Column('updated_date', sa.DateTime(), nullable=True),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('custom_text_content', sa.Text(), nullable=True),
    sa.Column('custom_json_content', postgresql.JSON(astext_type=sa.Text()), nullable=True),
    sa.Column('engagement_content_id', sa.Integer(), nullable=True),
    sa.Column('engagement_id', sa.Integer(), nullable=True),
    sa.Column('created_by', sa.String(length=50), nullable=True),
    sa.Column('updated_by', sa.String(length=50), nullable=True),
    sa.ForeignKeyConstraint(['engagement_content_id'], ['engagement_content.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['engagement_id'], ['engagement.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('engagement_summary_content',
    sa.Column('created_date', sa.DateTime(), nullable=False),
    sa.Column('updated_date', sa.DateTime(), nullable=True),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('content', sa.Text(), nullable=False),
    sa.Column('rich_content', postgresql.JSON(astext_type=sa.Text()), nullable=False),
    sa.Column('engagement_content_id', sa.Integer(), nullable=True),
    sa.Column('engagement_id', sa.Integer(), nullable=True),
    sa.Column('created_by', sa.String(length=50), nullable=True),
    sa.Column('updated_by', sa.String(length=50), nullable=True),
    sa.ForeignKeyConstraint(['engagement_content_id'], ['engagement_content.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['engagement_id'], ['engagement.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )

    # content and rich content data needs to be moved from engagement table to engagement summary table
    connection = op.get_bind()
    result = connection.execute("""
        SELECT id, content, rich_content
        FROM engagement
    """)
    engagements = result.fetchall()

    # Iterate through each engagement record and insert into new tables
    for index, engagement in enumerate(engagements):
        eng_id = engagement['id']

        # Insert into 'engagement_content'
        connection.execute(
            text(
                """
                INSERT INTO engagement_content
                    (created_date, title, icon_name, content_type, engagement_id, sort_index, is_internal)
                VALUES
                    (NOW(), :title, :icon_name, :content_type, :engagement_id, 1, false)
                """
            ),
            {
                'title': ContentTitle.DEFAULT.value,
                'icon_name': ContentTitle.DEFAULT_ICON.value,
                'content_type': EngagementContentType(1).name,
                'engagement_id': eng_id,
            },
        )

        engagement_content_id = index + 1  # Adjust the index to start from 1
        rich_content = engagement['rich_content']

        # Insert into 'engagement_summary'
        connection.execute(
            text(
                """
                INSERT INTO engagement_summary_content
                    (created_date, content, rich_content, engagement_content_id, engagement_id)
                VALUES
                    (NOW(), :content, :rich_content, :engagement_content_id, :engagement_id)
                """
            ),
            {
                'content': engagement['content'],
                'rich_content': json.dumps(rich_content),
                'engagement_content_id': engagement_content_id,
                'engagement_id': eng_id,
            },
        )

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('engagement_summary_content')
    op.drop_table('engagement_custom_content')
    op.drop_table('engagement_content')
    op.execute('DROP TYPE IF EXISTS engagementcontenttype;')
    # ### end Alembic commands ###
