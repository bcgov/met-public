apiVersion: template.openshift.io/v1
kind: Template
metadata:
  name: keycloak-deploy-template
  annotations:
    description: "Deployment Configuration Template for the MET Keycloak Project"
    tags: "met, keycloak"
objects:
- apiVersion: apps.openshift.io/v1
  kind: DeploymentConfig
  metadata:
    labels:
      app: ${APP}
      role: api
    name: ${APP}
  spec:
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      deploymentConfig: ${APP}
    strategy:
      activeDeadlineSeconds: 21600
      recreateParams:
        timeoutSeconds: 600
      resources: {}
      type: Recreate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: ${APP}
          deploymentConfig: ${APP}
          role: api
        name: ${APP}
      spec:
        containers:
        - env:
          - name: DB_DATABASE
            valueFrom:
              secretKeyRef:
                key: database-name
                name: ${DB_APP_NAME}
          - name: DB_USER
            valueFrom:
              secretKeyRef:
                key: database-user
                name: ${DB_APP_NAME}
          - name: DB_PASSWORD
            valueFrom:
              secretKeyRef:
                key: database-password
                name: ${DB_APP_NAME}
          envFrom:
          - configMapRef:
              name: ${APP}
          image: quay.io/keycloak/keycloak:14.0.0
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 100
            httpGet:
              path: /
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: ${APP}
          ports:
          - containerPort: 8080
            protocol: TCP
          readinessProbe:
            failureThreshold: 300
            httpGet:
              path: /
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              cpu: 300m
              memory: 1Gi
            requests:
              cpu: 150m
              memory: 250Mi
          securityContext:
            privileged: false
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /opt/keycloak/data
            name: empty
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - emptyDir: {}
          name: empty
    test: false
    triggers:
    - type: ConfigChange
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: ${APP}
    name: ${APP}
  spec:
    ipFamilyPolicy: SingleStack
    ports:
    - port: 8080
      protocol: TCP
      targetPort: 8080
    selector:
      deploymentConfig: ${APP}
    sessionAffinity: None
    type: ClusterIP
- apiVersion: route.openshift.io/v1
  kind: Route
  metadata:
    labels:
      app: ${APP}
    name: ${APP}
  spec:
    host: met-oidc-${ENV}.apps.gold.devops.gov.bc.ca
    tls:
      termination: edge
    to:
      kind: Service
      name: ${APP}
      weight: 100
    wildcardPolicy: None
- apiVersion: v1
  kind: ConfigMap
  metadata:
    labels:
      app: ${APP}
    name: ${APP}
  data:
    DB_ADDR: ${DB_APP_NAME}
    DB_VENDOR: POSTGRES
    JAVA_OPTS: -Dkeycloak.profile.feature.scripts=enabled -Dkeycloak.profile.feature.upload_scripts=enabled
    JGROUPS_DISCOVERY_EXTERNAL_IP: keycloak
    JGROUPS_DISCOVERY_PROPERTIES: datasource_jndi_name=java:jboss/datasources/KeycloakDS,
      initialize_sql="CREATE TABLE IF NOT EXISTS JGROUPSPING ( own_addr varchar(200)
      NOT NULL, cluster_name varchar(200) NOT NULL, created timestamp default current_timestamp,
      ping_data BYTEA, constraint PK_JGROUPSPING PRIMARY KEY (own_addr, cluster_name))"
    JGROUPS_DISCOVERY_PROTOCOL: org.jgroups.protocols.JDBC_PING
    KC_PROXY: edge
    KEYCLOAK_ADMIN: admin
    KEYCLOAK_ADMIN_PASSWORD: admin
    KEYCLOAK_HTTPS: "true"
    KEYCLOAK_LOGLEVEL: DEBUG
    PROXY_ADDRESS_FORWARDING: "true"
parameters:
  - name: APP
    description: "The application name"
    value: keycloak
  - name: ENV
    description: "The selected environment (dev, test, prod)"
    value: dev
  - name: DB_APP_NAME
    description: "The postgresql application name"
    value: postgresql-keycloak
