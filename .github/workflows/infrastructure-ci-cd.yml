name: Helm Chart CI/CD

on:
  push:
    branches: [main]
    paths: [openshift/**]
  pull_request:
    branches: [main]
    paths: [openshift/**]
  workflow_dispatch:
    inputs:
      run_cd:
        description: "Run CD pipeline? (Otherwise, lint only)"
        required: true
        default: true
        type: boolean
      environment:
        description: "Select the environment to deploy"
        required: true
        default: "dev"
        type: choice
        options: [dev, test, prod, all]
      chart:
        description: "Select the chart to deploy"
        required: true
        default: "all"
        type: choice
        options:
          - met-db
          - notify-api
          - met-api
          - met-web
          - analytics-api
          - met-analytics
          - all

env:
  OC_VERSION: "4.16"

# Concurrency control to prevent simultaneous deployments to the same environment
concurrency:
  group: ${{ github.workflow }}-${{ github.event_name }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      charts: ${{ steps.set-chart-matrix.outputs.charts }}
      environments: ${{ steps.set-env-matrix.outputs.environments }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history for changed-files detection

      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@ed68ef82c095e0d48ec87eccea555d944a631a4c #v46.0.5
        with:
          files: |
            openshift/db/**
            openshift/notify/**
            openshift/api/**
            openshift/web/**
            openshift/analytics-api/**
            openshift/met-analytics/**

      - name: Set environment matrix
        id: set-env-matrix
        run: |
          # Default environments
          environments=("dev" "test" "prod")

          # Handle workflow_dispatch event
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            if [[ "${{ inputs.environment }}" != "all" ]]; then
              environments=("${{ inputs.environment }}")
            fi
          elif [[ "${{ github.event_name }}" == "pull_request" ]]; then
            # For PRs, only test against dev environment
            environments=("dev")
          fi

          # Convert to JSON array
          environments_json=$(printf '%s\n' "${environments[@]}" | jq -R . | jq -s .)

          echo "environments=${environments_json}" >> $GITHUB_OUTPUT
          echo "Environments to process: ${environments_json}" >> $GITHUB_STEP_SUMMARY

      - name: Set matrix for changed charts
        id: set-chart-matrix
        run: |
          # Define chart directories
          declare -A chart_dirs=(
            [met-db]="openshift/db"
            [notify-api]="openshift/notify"
            [met-api]="openshift/api"
            [met-web]="openshift/web"
            [analytics-api]="openshift/analytics-api"
            [met-analytics]="openshift/met-analytics"
          )

          # Initialize charts array
          charts=()

          # Handle workflow_dispatch event
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            if [[ "${{ inputs.chart }}" != "all" ]]; then
              chart_name="${{ inputs.chart }}"
              charts+=("{\"name\":\"$chart_name\",\"dir\":\"${chart_dirs[$chart_name]}\"}")
            else
              # Add all charts
              for chart_name in "${!chart_dirs[@]}"; do
                charts+=("{\"name\":\"$chart_name\",\"dir\":\"${chart_dirs[$chart_name]}\"}")
              done
            fi
          else
            # Handle push or pull_request events
            changed_files="${{ steps.changed-files.outputs.all_changed_files }}"
            
            # If no files changed in push event, deploy all charts
            if [[ -z "$changed_files" && "${{ github.event_name }}" == "push" ]]; then
              for chart_name in "${!chart_dirs[@]}"; do
                charts+=("{\"name\":\"$chart_name\",\"dir\":\"${chart_dirs[$chart_name]}\"}")
              done
            else
              # Find changed charts
              for chart_name in "${!chart_dirs[@]}"; do
                if echo "$changed_files" | grep -q "^${chart_dirs[$chart_name]}/"; then
                  charts+=("{\"name\":\"$chart_name\",\"dir\":\"${chart_dirs[$chart_name]}\"}")
                fi
              done
            fi
          fi

          # If no charts selected, default to all
          if [[ ${#charts[@]} -eq 0 ]]; then
            for chart_name in "${!chart_dirs[@]}"; do
              charts+=("{\"name\":\"$chart_name\",\"dir\":\"${chart_dirs[$chart_name]}\"}")
            done
          fi

          # Convert to JSON array
          charts_json=$(printf '%s\n' "${charts[@]}" | jq -s '.')

          echo "charts=${charts_json}" >> $GITHUB_OUTPUT
          echo "Charts to process: ${charts_json}" >> $GITHUB_STEP_SUMMARY

  lint-and-test:
    needs: setup
    runs-on: ubuntu-latest
    strategy:
      matrix:
        chart: ${{ fromJson(needs.setup.outputs.charts) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Lint Helm chart
        run: |
          cd "${{ matrix.chart.dir }}"
          helm dependency update
          helm lint .
          helm template . --dry-run > /dev/null

      - name: Validate with kubeval
        run: |
          cd "${{ matrix.chart.dir }}"
          helm template . | kubeval --strict --ignore-missing-schemas

  deploy:
    needs: [setup, lint-and-test]
    if: (github.event_name == 'push' && github.ref == 'refs/heads/main') || (github.event_name == 'workflow_dispatch' && inputs.run_cd)
    runs-on: ubuntu-latest
    strategy:
      matrix:
        chart: ${{ fromJson(needs.setup.outputs.charts) }}
        environment: ${{ fromJson(needs.setup.outputs.environments) }}
    environment: ${{ matrix.environment }} # Link to environment-specific secrets
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install OpenShift CLI
        uses: redhat-actions/openshift-tools-installer@v1
        with:
          oc: ${{ env.OC_VERSION }}

      - name: Log in to OpenShift
        uses: redhat-actions/oc-login@v1
        with:
          openshift_server_url: ${{ secrets.OPENSHIFT_SERVER_URL }}
          openshift_token: ${{ secrets.OPENSHIFT_TOKEN }}
          namespace: ${{ secrets.PROJECT_NAMESPACE_PREFIX }}-${{ matrix.environment }}

      - name: Deploy Helm chart
        run: |
          cd "${{ matrix.chart.dir }}"

          # Update dependencies
          helm dependency update

          # Deploy with atomic option for automatic rollback on failure
          helm upgrade --install \
            ${{ matrix.chart.name }} \
            . \
            --namespace ${{ secrets.PROJECT_NAMESPACE_PREFIX }}-${{ matrix.environment }} \
            --values values-${{ matrix.environment }}.yaml \
            --atomic \
            --timeout 10m \
            --wait

      - name: Verify deployment
        run: |
          # Run helm tests if defined
          if helm test -h &> /dev/null; then
            helm test ${{ matrix.chart.name }} \
              --namespace ${{ secrets.PROJECT_NAMESPACE_PREFIX }}-${{ matrix.environment }} \
              --timeout 300s
          fi

          # Check rollout status for all deployments and statefulsets
          oc get deployments,statefulsets -n ${{ secrets.PROJECT_NAMESPACE_PREFIX }}-${{ matrix.environment }} \
            -l app.kubernetes.io/instance=${{ matrix.chart.name }} \
            -o name | while read resource; do
            oc rollout status $resource \
              --namespace ${{ secrets.PROJECT_NAMESPACE_PREFIX }}-${{ matrix.environment }} \
              --timeout 300s
          done

      - name: Verify service endpoints
        # Only critical for production
        continue-on-error: ${{ matrix.environment != 'prod' }}
        if: ${{ matrix.environment == 'prod' }}
        run: |
          # Get all services for this chart
          services=$(oc get services -n ${{ secrets.PROJECT_NAMESPACE_PREFIX }}-${{ matrix.environment }} \
            -l app.kubernetes.io/instance=${{ matrix.chart.name }} \
            -o jsonpath='{.items[*].metadata.name}')

          for service in $services; do
            echo "Checking service endpoints for $service"
            endpoints=$(oc get endpoints $service \
              -n ${{ secrets.PROJECT_NAMESPACE_PREFIX }}-${{ matrix.environment }} \
              -o jsonpath='{.subsets[*].addresses[*].ip}')
            
            if [ -z "$endpoints" ]; then
              echo "ERROR: No endpoints found for service $service"
              exit 1
            else
              echo "Service $service has endpoints: $endpoints"
            fi
          done
