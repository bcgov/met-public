name: MET ANALYTICS API CI

on:
  pull_request:
    branches:
      - main
    paths:
      - "analytics-api/**"

defaults:
  run:
    shell: bash
    working-directory: ./analytics-api

jobs:
  setup-job:
    runs-on: ubuntu-20.04

    if: github.repository == 'bcgov/met-public'

    steps:
      - uses: actions/checkout@v2
      - run: "true"

  linting:
    needs: setup-job
    runs-on: ubuntu-20.04

    strategy:
      matrix:
        python-version: [3.12]

    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          make setup
      - name: Lint with pylint
        id: pylint
        run: |
          make pylint
      - name: Lint with flake8
        id: flake8
        run: |
          make flake8
  testing:
    needs: setup-job
    env:
      FLASK_ENV: "testing"
      DATABASE_TEST_URL: "postgresql://postgres:postgres@localhost:5432/postgres"

      JWT_OIDC_TEST_ISSUER: "http://localhost:8081/auth/realms/demo"
      JWT_OIDC_TEST_WELL_KNOWN_CONFIG: "http://localhost:8081/auth/realms/demo/.well-known/openid-configuration"
      JWT_OIDC_TEST_ALGORITHMS: "RS256"
      JWT_OIDC_TEST_AUDIENCE: "met-web"
      JWT_OIDC_TEST_CLIENT_SECRET: "1111111111"
      JWT_OIDC_TEST_JWKS_CACHE_TIMEOUT: "6000"

      KEYCLOAK_TEST_ADMIN_CLIENTID: "met-admin"
      KEYCLOAK_TEST_ADMIN_SECRET: "2222222222"
      KEYCLOAK_TEST_AUTH_AUDIENCE: "met-web"
      KEYCLOAK_TEST_AUTH_CLIENT_SECRET: "1111111111"
      KEYCLOAK_TEST_BASE_URL: "http://localhost:8081"
      KEYCLOAK_TEST_REALMNAME: "demo"
      USE_TEST_KEYCLOAK_DOCKER: "YES"

      SQLALCHEMY_DATABASE_URI: "postgresql://postgres:postgres@localhost:5432/postgres"
      
    runs-on: ubuntu-20.04

    services:
      postgres:
        image: postgres:12
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
        # needed because the postgres container does not provide a healthcheck
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          make setup
      - name: Test with pytest
        id: test
        run: |
          make test

      # Set codecov branch name with prefix if pull request
      - name: Sets Codecov branch name
        run: |
          echo "CODECOV_BRANCH=PR_${{github.head_ref}}" >> $GITHUB_ENV
        if: github.event_name == 'pull_request'
        
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          flags: analyticsapi
          name: codecov-analytics-api
          fail_ci_if_error: true   
          verbose: true 
          override_branch: ${{env.CODECOV_BRANCH}}
          token: ${{ secrets.CODECOV_TOKEN }}

  build-check:
    needs: setup-job
    runs-on: ubuntu-20.04

    steps:
      - uses: actions/checkout@v2
      - name: build to check strictness
        id: build
        run: |
          make build-nc
